#!/usr/bin/racket
#lang sicp

; returns a procedure that takes a parameter which itself is a procedure that gets called with the
; parameters x and y as arguments
(define (mycons x y)
  (lambda (m) (m x y)))

; calls a procedure generated by mycons and supplies a procedure that takes two arguments and
; returns the first
(define (mycar z)
  (z (lambda (p q) p)))

; like mycar, but returns the second argument
(define (mycdr z)
  (z (lambda (p q) q)))

(define test (mycons 1 (mycons 2 3)))

; returns the result of (mycons 2 3), which is a procedure
(mycdr test)
(mycar (mycdr test))
